@page "/"
@using Microsoft.AspNetCore.DataProtection;
@using Microsoft.EntityFrameworkCore;
@using H5_Serverside_Crypting.Models;
@using System.Security.Claims
@using H5_Serverside_Crypting.Services;

@inject toDoContext _context
@inject toDoService _service
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IDataProtectionProvider IDataProtectionProvider
@inject IConfiguration Configuration

<PageTitle>Serverside crypting</PageTitle>
<div class="container" style="height: 100vh; width: 100vw; position: relative;">
    <h1>H5 - Serverside crypting</h1>

    @if (_authState.User.Identity != null && isAuthenticated)
    {
        <div class="text-center">
            <div class="inputDiv m-auto">
                <h3>Add New Entry</h3>
                <label for="_title">Title</label>
                <input type="text" @bind="_title" id="_title" />
                <label for="_description">Description</label>
                <input type="text" @bind="_description" id="_description" />
                <button class="btn btn-primary" @onclick="Create">Add New</button>
            </div>
        </div>

        <div class="dataTable">

            @if (_authState.User.Identity != null && isAuthenticated)
            {
                @if (_list.Count >= 1)
                {
                    <table class="table">
                        <thead>
                            <tr>
                                <th>Title</th>
                                <th>Description</th>
                                <th>Action</th>
                            </tr>
                        </thead>
                        <tbody>

                            @foreach (var todo in _list)
                            {
                                <tr>
                                    <td>
                                        <input type="text" @bind=todo.Title @oninput="() => { titleChanged = true; }" />
                                    </td>
                                    <td>
                                        <input type="text" @bind=todo.Description @oninput="() => { descriptionChanged = true; }" />
                                    </td>
                                    <td>
                                        <button class="btn btn-primary" disabled="@(!hasChanges)" @onclick="() => Update(todo)">Update</button>
                                        <button class="btn btn-danger" @onclick="() => Delete(todo)">Delete</button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
                else
                {
                    <label>No Items available</label>
                }

            }
            else
            {
                <label>Please login first.</label>

            }

        </div>

    }


    

</div>
@if (showDialog)
{
    <div class="dialog" style="width:auto; height: 30px; display: flex; text-align: center;
    justify-content: center; align-items: center; position: absolute; top: 50%; left: 50%;background-color:#7FFF00">

        @dialogMessage

    </div>
}


@code {
    private AuthenticationState? _authState;
    private List<toDoModel> _list = new List<toDoModel>();
    private IDataProtector _protector;
    private string _inputToHash;
    private string _hashResult ="";
    private string _title = string.Empty;
    private string _description = string.Empty;
    private bool isAuthenticated = false;
    private bool showDialog = false;
    private string dialogMessage = "";
    private string previousHash = "";
    private bool titleChanged = false;
    private bool descriptionChanged = false;
    private bool hasChanges => titleChanged || descriptionChanged;


    #region OnInitialize
    protected override async Task OnInitializedAsync()
    {
        _authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (_authState.User.Identity?.IsAuthenticated == true)
        {
            isAuthenticated = true;
            await ReadData();
        }
        else
        {
            isAuthenticated = false;
        }
    }
    #endregion

    #region Reading the data from the todo table with the user claims
    public async Task ReadData()
    {
        //Authenticating the user
        var _user = _authState.User;
        //Getting the data with the service call
        _list = await _service.ReadData(_user);
    }
    #endregion

    #region Create a new todo entry
    private async Task Create()
    {
        if (isAuthenticated)
        {
            var _user = _authState.User;

            toDoModel newEntry = new toDoModel
            {
                Title = _title,
                Description = _description,
                UserId = Guid.Parse(_user.FindFirstValue(ClaimTypes.NameIdentifier))
            };

            dialogMessage = await _service.Create(newEntry);
            await ReadData();
            await dialog(dialogMessage);
            await ClearInput();
        }

    }
    #endregion

    #region Update Entry
    private async Task Update(toDoModel entry)
    {
        if (isAuthenticated)
        {
            var _user = _authState.User;
            // Update the entry in the service
            dialogMessage = await _service.Update(entry);
            // Reload the data asynchronously after the update
            await ReadData();
            // Display a success message
            await dialog(dialogMessage);
            titleChanged = false;
            descriptionChanged = false; 
        };
    }
    #endregion

    #region Delete Entry function
    private async Task Delete(toDoModel entry)
    {
        if (isAuthenticated)
        {
            dialogMessage = await _service.Delete(entry);
            await ReadData();
            await dialog(dialogMessage);
        }
    }
    #endregion

    // #region Hash function call
    // private async Task HashWithMD5()
    // {
    //     // Retrieve the previous hash from your in-memory storage
    //     string storedPreviousHash = _hashResult;

    //     _hashResult = await _service.MD5Hashing(_inputToHash, storedPreviousHash);

    //     // If the hash has changed, update the previous hash in your in-memory storage
    //     if (_hashResult != storedPreviousHash)
    //     {
    //         previousHash = _hashResult;
    //     }
    // }
    // #endregion

    #region the dialog box on the top for showing messages
    private async Task dialog(string text)
    {
        showDialog = true;
        dialogMessage = text;
        StateHasChanged(); // Force the component to re-render
        await Task.Delay(1500);
        showDialog = false;
        StateHasChanged(); // Force the component to re-render
    }
    #endregion

    #region Clear the inpit fields after creating an entry
    private async Task ClearInput()
    {
        _title = string.Empty;
        _description = string.Empty;
        await Task.Yield();
    }
    #endregion

}
